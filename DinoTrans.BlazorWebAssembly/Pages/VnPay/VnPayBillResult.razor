@page "/VnPayreturn"
@page "/VnPayReturnFromAdminToCarrier"
@inject NavigationManager nav
@inject IVnPayService VnpayService
@inject IJSRuntime js
<div class="card">
    <div class="card-header text-center">
        <div class="row col-md-12">
            <div class="col-md-5">
                <img src="/images/logo2.png" style="max-width: 120px; max-height:120px;" />
            </div>
            <div class="col-md-2">
                <div style="padding-top:50px;padding-left:10px;">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left-right" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M1 11.5a.5.5 0 0 0 .5.5h11.793l-3.147 3.146a.5.5 0 0 0 .708.708l4-4a.5.5 0 0 0 0-.708l-4-4a.5.5 0 0 0-.708.708L13.293 11H1.5a.5.5 0 0 0-.5.5m14-7a.5.5 0 0 1-.5.5H2.707l3.147 3.146a.5.5 0 1 1-.708.708l-4-4a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 4H14.5a.5.5 0 0 1 .5.5" />
                    </svg>
                </div>
            </div>
            <div class="col-md-5">
                <img src="/images/VnPayImage.png" style="max-width: 120px; max-height:120px;" />
            </div>
        </div>
        @if (vnp_TransactionStatus != "00" || vnp_ResponseCode != "00")
        {
            <div style="color:red">Giao dịch thất bại. Hãy thử lại sau.</div>
        }
        else
        {
            <div>
                <b>Giao dịch thành công. Admin DinoTrans đã nhận được tiền giao dịch</b>
            </div>
        }
    </div>
    <div class="card-body">
        <table class="table table-striped">
            <thead>
                <tr>
                    <td>Loại dữ liệu</td>
                    <td>Giá trị</td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Mã ngân hàng</td>
                    <td>@vnp_BankCode</td>
                </tr>
                <tr>
                    <td>Mã giao dịch tại ngân hàng</td>
                    <td>@vnp_BankTranNo</td>
                </tr>
                <tr>
                    <td>Mã giao dịch ghi nhận tại hệ thống VNPAY</td>
                    <td>@vnp_TransactionNo</td>
                </tr>
                <tr>
                    <td>Loại thẻ</td>
                    <td>@vnp_CardType</td>
                </tr>
                <tr>
                    <td>Ngày thanh toán</td>
                    @if (PayDate != default)
                    {
                        <td>@PayDate.ToString("dd-MM-yyyy hh:mm:ss tt")</td>
                    }
                    else
                    {
                        <td></td>
                    }
                </tr>
                <tr>
                    <td>Thông tin thanh toán</td>
                    <td>@vnp_OrderInfo</td>
                </tr>
                <tr>
                    <td>Số tiền</td>
                    <td>@vnp_Amount.ToString("N0") (VNĐ)</td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="card-footer">
        <div class="float-end">
            @if (!nav.Uri.Contains("/VnPayReturnFromAdminToCarrier"))
            {
                @if (vnp_TransactionStatus == "00" && vnp_ResponseCode == "00")
                {
                    <button class="btn btn-primary" @onclick="GotoTendersInExecution">Đi tới thầu đang vận chuyển</button>
                }
                else
                {
                    <button class="btn btn-danger" @onclick="GoToToAssigns">Đi tới thầu đang chọn lựa</button>
                }
            }else
            {
                @if (vnp_TransactionStatus == "00" && vnp_ResponseCode == "00")
                {
                    <button class="btn btn-primary" @onclick="GotoTendersCompleted">Đi tới thầu đã hoàn tất</button>
                }
                else
                {
                    <button class="btn btn-danger" @onclick="GotoTendersInExecution">Đi tới thầu đang vận chuyển</button>
                }
            }
        </div>
    </div>
</div>

@code {
    public float vnp_Amount { get; set; }
    public string vnp_BankCode { get; set; } = "";
    public string vnp_BankTranNo { get; set; } = "";
    public string vnp_CardType { get; set; } = "";
    public string vnp_OrderInfo { get; set; } = "";
    public string vnp_PayDate { get; set; } = "";
    public string vnp_ResponseCode { get; set; } = "";
    public string vnp_TmnCode { get; set; } = "";
    public string vnp_TransactionNo { get; set; } = "";
    public string vnp_TransactionStatus { get; set; } = "";
    public string vnp_TxnRef { get; set; } = "";
    public string vnp_SecureHash { get; set; } = "";
    public DateTime PayDate { get; set; } = new DateTime();
    protected override async Task OnInitializedAsync()
    {
        var uri = nav.Uri;
        var query = QueryHelpers.ParseQuery(uri.Split("?")[1]);
        if (query.ContainsKey("vnp_Amount"))
        {
            if (float.TryParse(query["vnp_Amount"], out float money))
            {
                vnp_Amount = money / 100;
            }
        }
        if (query.ContainsKey("vnp_BankCode"))
        {
            vnp_BankCode = query["vnp_BankCode"];
        }
        if (query.ContainsKey("vnp_BankTranNo"))
        {
            vnp_BankTranNo = query["vnp_BankTranNo"];
        }
        if (query.ContainsKey("vnp_CardType"))
        {
            vnp_CardType = query["vnp_CardType"];
        }
        if (query.ContainsKey("vnp_OrderInfo"))
        {
            vnp_OrderInfo = query["vnp_OrderInfo"];
        }
        if (query.ContainsKey("vnp_PayDate"))
        {
            vnp_PayDate = query["vnp_PayDate"];
            if (DateTime.TryParseExact(vnp_PayDate, "yyyyMMddHHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime result1))
            {
                PayDate = result1;
            };
        }
        if (query.ContainsKey("vnp_TmnCode"))
        {
            vnp_TmnCode = query["vnp_TmnCode"];
        }
        if (query.ContainsKey("vnp_TransactionNo"))
        {
            vnp_TransactionNo = query["vnp_TransactionNo"];
        }
        if (query.ContainsKey("vnp_TransactionStatus"))
        {
            vnp_TransactionStatus = query["vnp_TransactionStatus"];
        }
        if (query.ContainsKey("vnp_TxnRef"))
        {
            vnp_TxnRef = query["vnp_TxnRef"];
        }
        if (query.ContainsKey("vnp_SecureHash"))
        {
            vnp_SecureHash = query["vnp_SecureHash"];
        }
        if (query.ContainsKey("vnp_ResponseCode"))
        {
            vnp_ResponseCode = query["vnp_ResponseCode"];
        }
        if (query.ContainsKey("vnp_TxnRef"))
        {
            if (int.TryParse(vnp_TxnRef.Split("_")[0], out int TenderBidId))
            {
                if (!nav.Uri.Contains("VnPayReturnFromAdminToCarrier"))
                {
                    var result = await VnpayService.GetDataReturn_ShipperToAdminDinoTrans(new Bill
                        {
                            TenderBidId = TenderBidId,
                            BillType = BillTypeEnum.ShipperToAdminDinoTrans,
                            vnp_Amount = vnp_Amount,
                            vnp_BankCode = vnp_BankCode,
                            vnp_BankTranNo = vnp_BankTranNo,
                            vnp_CardType = vnp_CardType,
                            vnp_OrderInfo = vnp_OrderInfo,
                            vnp_PayDate = vnp_PayDate,
                            vnp_TmnCode = vnp_TmnCode,
                            vnp_TransactionNo = vnp_TransactionNo,
                            vnp_TransactionStatus = vnp_TransactionStatus,
                            vnp_TxnRef = vnp_TxnRef,
                            vnp_SecureHash = vnp_SecureHash,
                            vnp_ResponseCode = vnp_ResponseCode
                        }, new ApplicationUser
                        {
                            FirstName = "",
                            LastName = ""
                        });
                }else
                {
                    var result = await VnpayService.GetDataReturn_AdminDinoTransToCarrier(new Bill
                        {
                            TenderBidId = TenderBidId,
                            BillType = BillTypeEnum.AdminDinoTransToCarrier,
                            vnp_Amount = vnp_Amount,
                            vnp_BankCode = vnp_BankCode,
                            vnp_BankTranNo = vnp_BankTranNo,
                            vnp_CardType = vnp_CardType,
                            vnp_OrderInfo = vnp_OrderInfo,
                            vnp_PayDate = vnp_PayDate,
                            vnp_TmnCode = vnp_TmnCode,
                            vnp_TransactionNo = vnp_TransactionNo,
                            vnp_TransactionStatus = vnp_TransactionStatus,
                            vnp_TxnRef = vnp_TxnRef,
                            vnp_SecureHash = vnp_SecureHash,
                            vnp_ResponseCode = vnp_ResponseCode
                        });
                }
            }
        }
    }

    public void GotoTendersInExecution()
    {
        nav.NavigateTo("/Tenders/InExecution");
    }

    public void GotoTendersCompleted()
    {
        nav.NavigateTo("/Tenders/Completed");
    }

    public void GoToToAssigns()
    {
        nav.NavigateTo("/Tenders/ToAssign");
    }
}
