@inject IJSRuntime js
@inject IConstructionMachineService ConstructionMachineService
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Hosting
<dialog style="position:fixed; top:50%; left:50%; transform: translate(-50%, -50%); min-width:500px; min-height:500px" id="my-dialog">
    <EditForm Model="newConstructionMachine">
        <div class="card">
            <div class="column">
                <div class="card-header text-center column">
                    <img src="/images/ModelConstruction.png" />
                    <div>Tạo mới máy xây dựng</div>
                </div>
                <div class="card-body p-4">
                    <div class="form-group mt-3">
                        <label class="form-label">Tên máy</label>
                        <input type="text" @bind="newConstructionMachine.Name" class="form-control" />
                    </div>

                    <div class="form-group mt-3">
                        <label class="form-label">Thương hiệu</label>
                        <input type="text" @bind="newConstructionMachine.Brand" class="form-control" />
                    </div>

                    <div class="form-group mt-3">
                        <label class="form-label">Số seri</label>
                        <input type="text" @bind="newConstructionMachine.SerialNumber" class="form-control" />
                    </div>

                    <div class="form-group mt-3">
                        <label class="form-label">Chiều dài</label>
                        <div class="row">
                            <div class="col-md-9" style="padding-right:0px">
                                <input type="number" @bind="newConstructionMachine.Length" class="form-control" />
                            </div>
                            <div class="col-md-3" style="padding-left:0px">
                                <button class="btn btn-primary" disabled style="width: 100%;">mm</button>
                            </div>
                        </div>
                    </div>

                    <div class="form-group mt-3">
                        <label class="form-label">Chiều rộng</label>
                        <div class="row">
                            <div class="col-md-9" style="padding-right:0px">
                                <input type="number" @bind="newConstructionMachine.Width" class="form-control" />
                            </div>
                            <div class="col-md-3" style="padding-left:0px">
                                <button class="btn btn-primary" disabled style="width: 100%;">mm</button>
                            </div>
                        </div>
                    </div>

                    <div class="form-group mt-3">
                        <label class="form-label">Chiều cao</label>
                        <div class="row">
                            <div class="col-md-9" style="padding-right:0px">
                                <input type="number" @bind="newConstructionMachine.Height" class="form-control" />
                            </div>
                            <div class="col-md-3" style="padding-left:0px">
                                <button class="btn btn-primary" disabled style="width: 100%;">mm</button>
                            </div>
                        </div>
                    </div>

                    <div class="form-group mt-3">
                        <label class="form-label">Cân nặng</label>
                        <div class="row">
                            <div class="col-md-9" style="padding-right:0px">
                                <input type="number" @bind="newConstructionMachine.Weight" class="form-control" />
                            </div>
                            <div class="col-md-3" style="padding-left:0px">
                                <button class="btn btn-primary" disabled style="width: 100%;">kg</button>
                            </div>
                        </div>
                    </div>
                    <div class="form-group mt-3" style="position: relative;">
                        <label class="form-label">Thêm ảnh mới</label>
                        <br />
                        <div style="margin-left:150px; width: 150px; height: 150px; background-image: url('/images/UploadImage.png'); background-size: cover; background-repeat: no-repeat; background-position: center; position: absolute;"></div>
                        <InputFile OnChange="@HandleFileSelection" multiple style="margin-left:150px; opacity: 0; width: 150px; height: 150px; position: relative; top: 0; left: 0; cursor: pointer;" />
                        <div class="mt-3">
                            @if (selectedFiles != null && selectedFiles.Count > 0)
                            {
                                @foreach (var file in selectedFiles)
                                {
                                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(file.Data)}")" alt="Selected Image" style="width: 150px; height: 150px; margin-right: 10px;" />
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="card-footer row">
                    <div class="form-group col-md-6">
                        <button class="btn btn-secondary ms-2" type="submit" @onclick="Close">Hủy</button>
                    </div>
                    <div class="form-group col-md-6">
                        <button style="max-width:100px" class="btn btn-primary float-end me-2" type="submit" @onclick="CreateMachine">Tạo mới</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</dialog>

<button style="min-width:fit-content; max-width:fit-content" class="float-end btn btn-primary" @onclick="OpenDialog">
    + Tạo mới máy
</button>

@code {
    public class InputFileData
    {
        public string Name { get; set; }
        public byte[] Data { get; set; }
    }
    private long maxFileSize = 1024 * 1024 * 3;
    private int maxAllowedFiles = 3;
    private List<string> errors = new();
    private List<IBrowserFile> loadedFiles = new();
    CreateContructionMachineDTO newConstructionMachine = new();
    [Parameter]
    public int CompanyId { get; set; }
    [Parameter]
    public EventCallback addedmachine { get; set; }
    [Parameter]
    public EventCallback<bool> CallDefaultEvent { get; set; }
    [Parameter]
    public bool IsDefaultEvent { get; set; } = false;
    private List<string> MyImages { get; set; } = new();
    private List<UploadResult> uploadResults = new();
    List<InputFileData> selectedFiles = new List<InputFileData>();

    protected override async Task OnInitializedAsync()
    {
        newConstructionMachine = new();
        newConstructionMachine.CompanyShipperId = CompanyId;
    }

    public async void HandleFileSelection(InputFileChangeEventArgs e)
    {
        loadedFiles = e.GetMultipleFiles().ToList();
        foreach (var file in e.GetMultipleFiles())
        {
            var buffer = new byte[file.Size];
            try
            {
                await file.OpenReadStream().ReadAsync(buffer);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            selectedFiles.Add(new InputFileData { Name = file.Name, Data = buffer });
        }
        StateHasChanged();
    }

    async void Close()
    {
        newConstructionMachine = new();
        selectedFiles = new();
        await js.InvokeVoidAsync("closeModal");
    }

    async Task OpenDialog()
    {
        if (IsDefaultEvent == true)
        {
            IsDefaultEvent = false;
            await CallDefaultEvent.InvokeAsync(IsDefaultEvent);
            return;
        }
        await js.InvokeVoidAsync("myJavaScriptFunction");
    }

    private async Task<ResponseModel<object>> CreateMachine()
    {
        var result = new ServiceResponses.GeneralResponse(false, "");
        if (loadedFiles.Count > maxAllowedFiles)
        {
            errors.Add($"Error: Attemping to upload {loadedFiles.Count} files, but only {maxAllowedFiles} files are allowed");
            return new ResponseModel<object>
                {
                    Message = "Fail to add images",
                    Success = false,
                    Data = errors
                };
        };
        if (loadedFiles.Count > 0)
        {
            try
            {
                using var content = new MultipartFormDataContent();
                foreach (var file in loadedFiles)
                {
                    var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                    fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
                    MyImages.Add(file.Name.Replace(" ", ""));
                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);
                }
                var response = await Http.PostAsync("/api/File/UploadConstructionMachineImages", content);
                var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();
                if (newUploadResults is not null)
                {
                    newConstructionMachine.Image = newUploadResults.Select(c => c.FilePath).ToList()!;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
            }
        }
        newConstructionMachine.CompanyShipperId = CompanyId;
        result = await ConstructionMachineService.CreateContructionMachine(newConstructionMachine);
        if (result.Flag)
        {
            await addedmachine.InvokeAsync();
            Close();
            return new ResponseModel<object>
                {
                    Message = result.Message,
                    Success = result.Flag
                };
        }
        return new ResponseModel<object>
            {
                Message = result.Message,
                Success = result.Flag
            };

    }
}
