@inject IJSRuntime js
@inject ITenderService TenderService
@inject ICompanyService CompanyService
@inject NavigationManager Nav

<AuthorizeView>
    <Authorized>
        @if ((Company == CompanyRoleEnum.Carrier && !IsFinishForCarrier) || (Company == CompanyRoleEnum.Shipper && !IsFinishForShipper && IsFinishForCarrier) || (Company == CompanyRoleEnum.Admin && IsFinishForCarrier && IsFinishForShipper))
        {
            <button class="btn btn-outline-secondary" @onclick="Submit">
                <i class="bi bi-lock"></i>
            </button>
        }
        else
        {
            <button class="btn btn-outline-secondary" disabled>
                <i class="bi bi-lock-fill"></i>
            </button>
        }

        @if (Company == CompanyRoleEnum.Carrier || Company == CompanyRoleEnum.Shipper)
        {
            <dialog style="position:fixed; top:50%; left:50%; transform: translate(-50%, -50%); min-width:500px; min-height:150px" id="confirm-finish-tender-@TenderId">
                <div class="card">
                    <div class="card-header text-center">
                        <b>@Title</b>
                    </div>
                    <div class="card-body">
                        <div>@Body</div>
                    </div>
                    <div class="card-footer row">
                        <div class="form-group col-md-6">
                            <button class="btn btn-outline-danger ms-2" type="submit" @onclick="Close">Đóng</button>
                        </div>
                        <div class="form-group col-md-6">
                            <button style="max-width:100px" class="btn btn-outline-success float-end me-2" type="submit" @onclick="OK">Xác nhận</button>
                        </div>
                    </div>
                </div>
            </dialog>
        }
        else
        {
            <dialog style="position:fixed; top:50%; left:50%; transform: translate(-50%, -50%); min-width:500px; min-height:150px" id="confirm-finish-tender-@TenderId">
                <div class="card">
                    <div class="card-body text-center">
                        <div class="row col-md-12">
                            <div class="col-md-5">
                                <img src="/images/logo2.png" style="max-width: 120px; max-height:120px;" />
                            </div>
                            <div class="col-md-2">
                                <div style="padding-top:50px;padding-left:10px;">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left-right" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M1 11.5a.5.5 0 0 0 .5.5h11.793l-3.147 3.146a.5.5 0 0 0 .708.708l4-4a.5.5 0 0 0 0-.708l-4-4a.5.5 0 0 0-.708.708L13.293 11H1.5a.5.5 0 0 0-.5.5m14-7a.5.5 0 0 1-.5.5H2.707l3.147 3.146a.5.5 0 1 1-.708.708l-4-4a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 4H14.5a.5.5 0 0 1 .5.5" />
                                    </svg>
                                </div>
                            </div>
                            <div class="col-md-5">
                                <img src="/images/VnPayImage.png" style="max-width: 120px; max-height:120px;" />
                            </div>
                        </div>
                        <b>Xác nhận chọn?</b>
                        <div>Bạn có chắc muốn kết thúc thầu và thanh toán tiền cho bên vận chuyển?</div>
                        <div>Bạn sẽ được điều hướng tới trang thanh toán bằng VnPay.</div>
                    </div>
                    <hr>

                    <div class="card-body text-center">
                        <b>Chi tiết giao dịch</b>
                        <div>Bạn sẽ phải trả những khoản phí sau cho cuộc vận chuyển</div>
                        <div>- Giá vận chuyển: @selectedBid.TransportPrice.ToString("N0") (VNĐ)</div>
                        <div>- Phí trung gian cho DinoTransAdmin (được nhận) (@PercentFeeForCarrier% giá đặt thầu): @Fee.ToString("N0") (VNĐ)</div>
                        <hr />
                        <div>Tổng tiền thanh toán: @Total.ToString("N0") (VNĐ)</div>
                    </div>
                    <div class="card-footer row">
                        <div class="form-group col-md-6">
                            <button class="btn btn-outline-danger float-start" type="submit" @onclick="Close">Đóng</button>
                        </div>
                        <div class="form-group col-md-6">
                            <button style="max-width:100px" class="btn btn-outline-success float-end me-2" type="submit" @onclick="OK">Xác nhận</button>
                        </div>
                    </div>
                </div>
            </dialog>
        }
    </Authorized>
</AuthorizeView>
@code {
    [Parameter]
    public int TenderId { get; set; }
    [Parameter]
    public CompanyRoleEnum Company { get; set; } = new();
    [Parameter]
    public EventCallback Finish { get; set; }
    public bool IsFinishForCarrier { get; set; } = false;
    public bool IsFinishForShipper { get; set; } = false;
    public string Title { get; set; }
    public string Body { get; set; }
    [Parameter]
    public List<TenderBid> Bids { get; set; } = new();
    public TenderBid selectedBid { get; set; } = new();
    public float Fee { get; set; }
    public float Total { get; set; }
    public float PercentFeeForCarrier { get; set; }
    protected override async Task OnInitializedAsync()
    {
        selectedBid = Bids.Where(b => b.IsSelected).FirstOrDefault();
        var companyCarrier = await CompanyService.GetCompanyByCompanyId(selectedBid.CompanyCarrierId);
        if (companyCarrier.Success)
        {
            PercentFeeForCarrier = companyCarrier.Data.CarrierFeePercentage;
            Fee = selectedBid.TransportPrice * PercentFeeForCarrier / 100;
            Total = selectedBid.TransportPrice - Fee;
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Có lỗi xảy ra");
        }
        var result = await TenderService.GetTenderById(TenderId);
        if(result.Success)
        {
            if (result.Data.IsCarrierConfirm) IsFinishForCarrier = true;
            if (result.Data.IsShipperConfirm) IsFinishForShipper = true;
        }
        if(Company == CompanyRoleEnum.Shipper)
        {
            Title = "Xác nhận nhận máy thành công";
            Body = "Bạn có chắc chắn đã nhận máy thành công và muốn hoàn tất đấu thầu?";
        }else if(Company == CompanyRoleEnum.Carrier)
        {
            Title = "Xác nhận đã vận chuyển máy thành công?";
            Body = "Bạn có chắc chắn đã vận chuyển máy thành công và muốn hoàn tất đấu thầu?";
        }
    }
    async void Close()
    {
        await js.InvokeVoidAsync("CloseDialog", $"confirm-finish-tender-{TenderId}");
    }
    async void OK()
    {
        var result = await TenderService.ConfirmCompleteTender(TenderId, new ApplicationUser
        {
            FirstName = "",
            LastName = ""
        });
        if (result.Flag && Company != CompanyRoleEnum.Admin)
        {
            Close();
            if(Company == CompanyRoleEnum.Carrier) IsFinishForCarrier = true;
            if (Company == CompanyRoleEnum.Shipper) IsFinishForShipper = true;
            await Finish.InvokeAsync();
        }
        else if (result.Flag && Company == CompanyRoleEnum.Admin)
        {
            Nav.NavigateTo(result.Message);
        }
        else
        {
            if (Company == CompanyRoleEnum.Carrier) IsFinishForCarrier = false;
            if (Company == CompanyRoleEnum.Shipper) IsFinishForShipper = false;
            await js.InvokeVoidAsync("alert", result.Message);
            Close();
        }
    }

    public async Task Submit()
    {
        await js.InvokeVoidAsync("OpenDialog", $"confirm-finish-tender-{TenderId}");
    }

}
