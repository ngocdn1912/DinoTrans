@page "/CompanySettings/ConstructionMachines"
@inject IConstructionMachineService ConstructionMachineServcie
@inject AuthenticationStateProvider AuthenticationState

<div class="card">
    <div class="card-header">
        <header>Thông tin máy xây dựng</header>
    </div>
    <div class="card-body">
        <div class="col-md-12 row mt-1 mb-2">
            <div class="col-md-8">
                <input type="text" class="form-control" value="@searchText"
                       @onchange="@((ChangeEventArgs e) => ChangeText(e))"
                       placeholder="Tìm kiếm máy xây dựng..." />

            </div>
            <div class="col-md-2"></div>
            <div class="col-md-2 p-0">
                <NewConstructionMachineDialog IsDefaultEvent="IsDefaultEvent" CallDefaultEvent="HandleDefaultEvent" addedmachine="recallAPI" CompanyId="CompanyId"></NewConstructionMachineDialog>
            </div>
        </div>
        <table class="table" style="">
            <thead>
                <tr>
                    <th>Ảnh</th>
                    <th>Tên</th>
                    <th>Thương hiệu</th>
                    <th>Số sêri</th>
                    <th>Chiều dài(mm)</th>
                    <th>Chiều rộng(mm)</th>
                    <th>Chiều cao(mm)</th>
                    <th>Trọng lượng(kg)</th>
                    <th>Hành động</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Data)
                {
                    <tr>
                        @{
                            var listImages = JsonConvert.DeserializeObject<List<Dictionary<string, string>>>(item.Image!);
                        }
                        <td>
                            <ViewAllConstructionMachinePictures MachineId="@item.Id" ListImanges="listImages"></ViewAllConstructionMachinePictures>
                        </td>
                        <td>@item.Name</td>
                        <td>@item.Brand</td>
                        <td>@item.SerialNumber</td>
                        <td>@item.Length</td>
                        <td>@item.Width</td>
                        <td>@item.Height</td>
                        <td>@item.Weight</td>
                        <td>
                            <button class="btn btn-outline-success">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325" />
                                </svg>
                                @{
                                    var machine = new CreateContructionMachineDTO
                                    {
                                        Id = item.Id,
                                        Name = item.Name,
                                        Brand = item.Brand,
                                        SerialNumber = item.SerialNumber,
                                        CompanyShipperId = item.CompanyShipperId,
                                        Length = item.Length,
                                        Width = item.Width,
                                        Height = item.Height,
                                        Weight = item.Weight
                                    };
                                }
                            </button>
                            <button class="btn btn-outline-danger">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                    <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                                </svg>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="card-footer">
        <div class="float-end">
            <Pagination ActivePageNumber="@currentPageNumber"
                        TotalPages="TotalPage"
                        DisplayPages="2"
                        FirstLinkIcon="IconName.ChevronDoubleLeft"
                        PreviousLinkIcon="IconName.ChevronLeft"
                        NextLinkIcon="IconName.ChevronRight"
                        LastLinkIcon="IconName.ChevronDoubleRight"
                        PageChanged="OnPageChangedAsync" />
        </div>
    </div>
</div>
@code {
    public int TotalPage { get; set; } = 1;
    [Parameter]
    public int CompanyId { get; set; }
    public bool IsDefaultEvent { get; set; } = true;
    public int currentPageNumber { get; set; }
    public string searchText { get; set; } = "";
    public List<ContructionMachine> Data = new();
    public AuthenticationState? authState = null;
    protected override async Task OnInitializedAsync()
    {
        var customState = (CustomAuthenticationStateProvider)AuthenticationState;
        authState = await customState.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            var companyId = int.Parse(authState.User.FindFirstValue("CompanyId"));
            CompanyId = companyId;
        }
        var result = await ConstructionMachineServcie.GetMachinesByCurrentShipperId(new SearchLoadDTO
        {
            pageIndex = 1,
            pageSize = 10,
            SearchText = ""
        },
        new ApplicationUser
        {
            FirstName = "",
            LastName = ""
        });

        if(result.Success)
        {
            Data = result.Data;
            TotalPage = result.PageCount;
        }
    }
    private async Task CallSearch()
    {
        var result = await ConstructionMachineServcie.GetMachinesByCurrentShipperId(new SearchLoadDTO
        {
            pageIndex = currentPageNumber,
            pageSize = 10,
            SearchText = searchText
        },
        new ApplicationUser
        {
            FirstName = "",
            LastName = ""
        });

        if(result.Success)
        {
            Data = result.Data;
            TotalPage = result.PageCount;
        }
    }
    private async Task HandleDefaultEvent(bool IsDefault)
    {
        IsDefaultEvent = IsDefault;
    }
    private async Task recallAPI()
    {
        currentPageNumber = 1;
        await CallSearch();
    }
    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { currentPageNumber = newPageNumber; });
        await CallSearch();
    }
    private async Task ChangeText(ChangeEventArgs e)
    {
        searchText = e?.Value.ToString();
        IsDefaultEvent = true;
        currentPageNumber = 1;
        await CallSearch();
    }
}
